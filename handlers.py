from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command, CommandObject

from webscraper import WebScraper
from globals import Globals

router = Router()


@router.message(Command('help', 'start'))
async def cmd_help(message: Message):
    if Globals.language == 'rus':
        info = (
            '*–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–±–∏—Ä–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∞–π—Ç–∞ Forbes.*\n\n'
            '–ö–æ–º–∞–Ω–¥—ã:\n'
            '/rates ‚Äì –≤—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö\n'
            '/info <_–Ω–∞–∑–≤–∞–Ω–∏–µ/—Å–∏–º–≤–æ–ª_> ‚Äì —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ\n'
            '/rus ‚Äì –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫\n'
            '/eng ‚Äì –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫\n')
        await message.answer(info, parse_mode="Markdown")
    else:
        info = (
            '*This bot gathers the latest cryptocurrency exchange rate information from the Forbes website.*\n\n'
            'Commands:\n'
            '/rates ‚Äì display information about cryptocurrencies\n'
            '/info <_name/symbol_> ‚Äì learn more about a cryptocurrency\n'
            '/rus ‚Äì set the language to Russian\n'
            '/eng ‚Äì set the language to English\n')
        await message.answer(info, parse_mode="Markdown")


@router.message(Command('eng'))
async def cmd_switch_to_eng(message: Message):
    Globals.language = 'eng'
    await message.answer('You have switched the language to English. '
                         'Enter /help to get the list of commands.')


@router.message(Command('rus'))
async def cmd_switch_to_rus(message: Message):
    Globals.language = 'rus'
    await message.answer('–í—ã –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. '
                         '–í–≤–µ–¥–∏—Ç–µ /help, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥.')


@router.message(Command('rates'))
async def cmd_rates(message: Message):
    scraper = WebScraper()
    data = scraper.scrape()
    info = ''
    for currency in data:
        week_dynamics_value = float(
            currency['week_dynamics'].strip('%').replace(
                ',', '.'))
        week_emoji = "üìà" if week_dynamics_value > 0 else "üìâ" if week_dynamics_value < 0 else "üü∞"
        info += f"{week_emoji} *{currency['name']} / {currency['symbol']}:* {currency['price']}\n"
    await message.answer(info, parse_mode="Markdown")


def convert_value(value_str):
    if 'K' in value_str:
        return float(value_str.replace('$', '').replace('K', '')) * 1000
    elif 'M' in value_str:
        return float(value_str.replace('$', '').replace('M', '')) * 1000000
    elif 'B' in value_str:
        return float(value_str.replace('$', '').replace('B', '')) * 1000000000
    elif 'T' in value_str:
        return float(
            value_str.replace(
                '$',
                '').replace(
                'T',
                '')) * 1000000000000
    else:
        return float(value_str.replace('$', '').replace(',', ''))


@router.message(Command('info'))
async def cmd_info(message: Message, command: CommandObject):
    currency_name = command.args
    scraper = WebScraper()
    data = scraper.scrape()
    info = ''
    for currency in data:
        if currency['name'] == currency_name or currency['symbol'] == currency_name:
            hour_dynamics_value = float(
                currency['hour_dynamics'].strip('%').replace(
                    ',', '.'))
            day_dynamics_value = float(
                currency['day_dynamics'].strip('%').replace(
                    ',', '.'))
            week_dynamics_value = float(
                currency['week_dynamics'].strip('%').replace(
                    ',', '.'))

            hour_emoji = "üìà" if hour_dynamics_value > 0 else "üìâ" if hour_dynamics_value < 0 else ""
            day_emoji = "üìà" if day_dynamics_value > 0 else "üìâ" if day_dynamics_value < 0 else ""
            week_emoji = "üìà" if week_dynamics_value > 0 else "üìâ" if week_dynamics_value < 0 else ""
            price_value = convert_value(currency['price'])
            price_emoji = "üíµ" if price_value < 10 else "üí∞" if price_value < 1000 else "üí∞üí∞" if price_value < 10000 else "üí∞üí∞üí∞"

            market_cap_value = convert_value(currency['market_cap'])
            market_cap_emoji = "üí∞" if market_cap_value < 1e9 else "üí∞üí∞" if market_cap_value < 1e12 else "üí∞üí∞üí∞"

            day_volume_value = convert_value(currency['day_volume'])
            day_volume_emoji = "üí∞" if day_volume_value < 1e7 else "üí∞üí∞" if day_volume_value < 1e9 else "üí∞üí∞üí∞"

            if Globals.language == 'rus':
                info += (f"{'=' * 25}\n"
                         f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {currency['name']}\n"
                         f"{'-' * 44}\n"
                         f"*–°–∏–º–≤–æ–ª:* {currency['symbol']}\n"
                         f"{'-' * 44}\n"
                         f"*–¶–µ–Ω–∞:* {currency['price']} {price_emoji}\n"
                         f"{'-' * 44}\n"
                         f"*–ó–∞ 1 —á–∞—Å:* {currency['hour_dynamics']} {hour_emoji}\n"
                         f"{'-' * 44}\n"
                         f"*–ó–∞ 24 —á–∞—Å–∞:* {currency['day_dynamics']} {day_emoji}\n"
                         f"{'-' * 44}\n"
                         f"*–ó–∞ 7 –¥–Ω–µ–π:* {currency['week_dynamics']} {week_emoji}\n"
                         f"{'-' * 44}\n"
                         f"*–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è:* {currency['market_cap']} {market_cap_emoji}\n"
                         f"{'-' * 44}\n"
                         f"*–û–±—ä–µ–º –∑–∞ –¥–µ–Ω—å:* {currency['day_volume']} {day_volume_emoji}\n"
                         f"{'=' * 25}\n")
            else:
                info += (f"{'=' * 25}\n"
                         f"*Name:* {currency['name']}\n"
                         f"{'-' * 44}\n"
                         f"*Symbol:* {currency['symbol']}\n"
                         f"{'-' * 44}\n"
                         f"*Price:* {currency['price']} {price_emoji}\n"
                         f"{'-' * 44}\n"
                         f"*1H:* {currency['hour_dynamics']} {hour_emoji}\n"
                         f"{'-' * 44}\n"
                         f"*24H:* {currency['day_dynamics']} {day_emoji}\n"
                         f"{'-' * 44}\n"
                         f"*7D:* {currency['week_dynamics']} {week_emoji}\n"
                         f"{'-' * 44}\n"
                         f"*Market Cap:* {currency['market_cap']} {market_cap_emoji}\n"
                         f"{'-' * 44}\n"
                         f"*Day Volume:* {currency['day_volume']} {day_volume_emoji}\n"
                         f"{'=' * 25}\n")

    if info == '':
        if Globals.language == 'rus':
            info += '–í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n\n'
            info += '–¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.'
        else:
            info += 'Currency not found. Please make sure the typed-in name is correct.\n\n'
            info += 'You can also use the /help command for assistance.'
    await message.answer(info, parse_mode="Markdown")


@router.message()
async def cmd_unknown(message: Message):
    if message.text.startswith('/'):
        if Globals.language == 'rus':
            await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
        else:
            await message.answer("Command not recognized. Enter /help to get the list of commands.")
    else:
        if Globals.language == 'rus':
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
        else:
            await message.answer("I am sorry, I cannot recognize your request. Enter /help to get the list of commands.")
